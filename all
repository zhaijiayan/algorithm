给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。


普通思路：
class Solution {
    public void rotate(int[] nums, int k) {
        for(int i=1;i<=k;i++){
            int num = nums[nums.length-1];
       
            for(int j=nums.length-1;j>0;j--){
            
               nums[j] = nums[j-1];
        
            }
             nums[0] = num;
        }
    }
}


快速解法：
class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        int[] newArr = new int[n];
        for (int i = 0; i < n; ++i) {
            newArr[(i + k) % n] = nums[i];
        }
        System.arraycopy(newArr, 0, nums, 0, n);
    }
}

输入
nums =
[1,2,3,4,5,6,7]
k = 3
输出
[5,6,7,1,2,3,4]





(2):
给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

 

示例 1：

输入：digits = [1,2,3]
输出：[1,2,4]
解释：输入数组表示数字 123。
示例 2：

输入：digits = [4,3,2,1]
输出：[4,3,2,2]
解释：输入数组表示数字 4321。
示例 3：

输入：digits = [9]
输出：[1,0]
解释：输入数组表示数字 9。
加 1 得到了 9 + 1 = 10。
因此，结果应该是 [1,0]。


class Solution {
    public int[] plusOne(int[] digits) {
        int maxLen = digits.length - 1;
        int max = digits[maxLen];
        if (max < 9) {
            digits[maxLen] = max + 1;
            return digits;
        }
        digits[maxLen] = 1;
        int[] newArr = new int[digits.length + 1];
        System.arraycopy(digits, 0, newArr, 0, digits.length);
        newArr[maxLen + 1] = max + 1 - 10;
        return newArr;
    }
}

别人的~：

class Solution {
    public int[] plusOne(int[] digits) {
        for (int i = digits.length - 1; i >= 0; i--) {
            digits[i]++;
            digits[i] = digits[i] % 10;
            if (digits[i] != 0) return digits;
        }
        digits = new int[digits.length + 1];
        digits[0] = 1;
        return digits;
    }
}

